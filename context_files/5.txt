# RAG QUERY RESULTS
================================================================================
Query: Standardize the error responses so they always return a JSON object with an error message (e.g., { "error": "Book not found" }) instead of just plain HTTP status codes.
Generated: 2025-09-16T08:06:43.227Z
Total Relevant Chunks: 5
Limit Applied: 5
================================================================================

## CHUNK 1
----------------------------------------
**Relevance Score:** 0.698670
**Type:** module_variable
**Name:** error
**File:** main.bal
**Line:** 109
**Position:** Start(109:1) - End(109:71)

**Content:**
```ballerina
Book|error validatedBook = validateAndFormatBook(bookRequest);
```

================================================================================

## CHUNK 2
----------------------------------------
**Relevance Score:** 0.667925
**Type:** resource
**Name:** post books
**File:** main.bal
**Lines:** 55-59 (5 lines)
**Position:** Start(55:102) - End(59:31)
**HTTP Method:** POST
**Resource Path:** books
**Full Path:** /bookstore/books
**Service:** /bookstore
**Parameters:** @http:Payload BookRequest bookRequest
**Return Type:** http:Created|http:BadRequest|http:InternalServerError

**Content:**
```ballerina
resource function post books(@http:Payload BookRequest bookRequest) returns http:Created|http:BadRequest|http:InternalServerError {
totalRequests += 1;

        Book|error validatedBook = validateAndFormatBook(bookRequest);
        if validatedBook is error {
            return http:BAD_REQUEST;
        }

        bookStore[validatedBook.id] = validatedBook;
        return http:CREATED;
}
```

================================================================================

## CHUNK 3
----------------------------------------
**Relevance Score:** 0.665947
**Type:** function
**Name:** validateAndFormatBook
**File:** main.bal
**Line:** 20
**Position:** Start(20:1) - End(20:77)
**Parameters:** BookRequest bookRequest
**Return Type:** Book|error
**Visibility:** private

**Content:**
```ballerina
function validateAndFormatBook(BookRequest bookRequest) returns Book|error {
    if bookRequest.title.trim().length() == 0 {
        return error("Book title cannot be empty");
    }

    if bookRequest.author.trim().length() == 0 {
        return error("Book author cannot be empty");
    }

    if bookRequest.price < 0.0d {
        return error("Book price cannot be negative");
    }

    if bookRequest.quantity < 0 {
        return error("Book quantity cannot be negative");
    }

    string bookId = uuid:createType1AsString();

    Book validatedBook = {
        id: bookId,
        title: bookRequest.title.trim(),
        author: bookRequest.author.trim(),
        isbn: bookRequest.isbn.trim(),
        price: bookRequest.price,
        quantity: bookRequest.quantity
    };

    return validatedBook;
}
```

================================================================================

## CHUNK 4
----------------------------------------
**Relevance Score:** 0.637937
**Type:** resource
**Name:** get books
**File:** main.bal
**Lines:** 2-7 (6 lines)
**Position:** Start(2:21) - End(7:32)
**HTTP Method:** GET
**Resource Path:** books
**Full Path:** /bookstore/books
**Service:** /bookstore
**Parameters:** int page = 1, int 'limit = maxBooksPerPage
**Return Type:** PaginatedBooks|http:InternalServerError

**Content:**
```ballerina
resource function get books(int page = 1, int 'limit = maxBooksPerPage) returns PaginatedBooks|http:InternalServerError {
totalRequests += 1;

        Book[] allBooks = bookStore.toArray();
        int totalCount = allBooks.length();
        int startIndex = (page - 1) * 'limit;
        int endIndex = startIndex + 'limit;

        if startIndex >= totalCount {
            PaginatedBooks emptyResult = {
                books: [],
                totalCount: totalCount,
                currentPage: page,
                totalPages: (totalCount + 'limit - 1) / 'limit
            };
            return emptyResult;
        }

        if endIndex > totalCount {
            endIndex = totalCount;
        }

        Book[] paginatedBooks = [];
        int index = startIndex;
        while index < endIndex {
            paginatedBooks.push(allBooks[index]);
            index += 1;
        }

        PaginatedBooks result = {
            books: paginatedBooks,
            totalCount: totalCount,
            currentPage: page,
            totalPages: (totalCount + 'limit - 1) / 'limit
        };

        return result;
}
```

================================================================================

## CHUNK 5
----------------------------------------
**Relevance Score:** 0.614867
**Type:** resource
**Name:** post books/search
**File:** main.bal
**Lines:** 106-109 (4 lines)
**Position:** Start(106:44) - End(109:5)
**HTTP Method:** POST
**Resource Path:** books/search
**Full Path:** /bookstore/books/search
**Service:** /bookstore
**Parameters:** @http:Payload BookSearchCriteria searchCriteria
**Return Type:** Book[]|http:InternalServerError

**Content:**
```ballerina
resource function post books/search(@http:Payload BookSearchCriteria searchCriteria) returns Book[]|http:InternalServerError {
totalRequests += 1;

        Book[] allBooks = bookStore.toArray();
        Book[] filteredBooks = [];

        foreach Book book in allBooks {
            boolean matches = true;

            string? titleCriteria = searchCriteria.title;
            if titleCriteria is string {
                if !book.title.toLowerAscii().includes(titleCriteria.toLowerAscii()) {
                    matches = false;
                }
            }

            string? authorCriteria = searchCriteria.author;
            if authorCriteria is string && matches {
                if !book.author.toLowerAscii().includes(authorCriteria.toLowerAscii()) {
                    matches = false;
                }
            }

            string? isbnCriteria = searchCriteria.isbn;
            if isbnCriteria is string && matches {
                if !book.isbn.includes(isbnCriteria) {
                    matches = false;
                }
            }

            decimal? minPriceCriteria = searchCriteria.minPrice;
            if minPriceCriteria is decimal && matches {
                if book.price < minPriceCriteria {
                    matches = false;
                }
            }

            decimal? maxPriceCriteria = searchCriteria.maxPrice;
            if maxPriceCriteria is decimal && matches {
                if book.price > maxPriceCriteria {
                    matches = false;
                }
            }

            if matches {
                filteredBooks.push(book);
            }
        }

        return filteredBooks;
}
```

================================================================================
# END OF RESULTS
Total chunks processed: 5
File saved: 2025-09-16T08:06:43.227Z
