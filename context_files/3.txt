# RAG QUERY RESULTS
================================================================================
Query: Modify the update books endpoint to prevent duplicate ISBNs and return a 409 Conflict error if a book with the same ISBN already exists.
Generated: 2025-09-16T08:06:42.678Z
Total Relevant Chunks: 5
Limit Applied: 5
================================================================================

## CHUNK 1
----------------------------------------
**Relevance Score:** 0.625653
**Type:** module_variable
**Name:** Book
**File:** main.bal
**Lines:** 126-133 (8 lines)
**Position:** Start(126:1) - End(133:11)

**Content:**
```ballerina
Book updatedBook = {
            id: bookId,
            title: bookRequest.title,
            author: bookRequest.author,
            isbn: bookRequest.isbn,
            price: bookRequest.price,
            quantity: bookRequest.quantity
        };
```

================================================================================

## CHUNK 2
----------------------------------------
**Relevance Score:** 0.607232
**Type:** resource
**Name:** post books
**File:** main.bal
**Lines:** 55-59 (5 lines)
**Position:** Start(55:102) - End(59:31)
**HTTP Method:** POST
**Resource Path:** books
**Full Path:** /bookstore/books
**Service:** /bookstore
**Parameters:** @http:Payload BookRequest bookRequest
**Return Type:** http:Created|http:BadRequest|http:InternalServerError

**Content:**
```ballerina
resource function post books(@http:Payload BookRequest bookRequest) returns http:Created|http:BadRequest|http:InternalServerError {
totalRequests += 1;

        Book|error validatedBook = validateAndFormatBook(bookRequest);
        if validatedBook is error {
            return http:BAD_REQUEST;
        }

        bookStore[validatedBook.id] = validatedBook;
        return http:CREATED;
}
```

================================================================================

## CHUNK 3
----------------------------------------
**Relevance Score:** 0.576167
**Type:** module_variable
**Name:** error
**File:** main.bal
**Line:** 109
**Position:** Start(109:1) - End(109:71)

**Content:**
```ballerina
Book|error validatedBook = validateAndFormatBook(bookRequest);
```

================================================================================

## CHUNK 4
----------------------------------------
**Relevance Score:** 0.574806
**Type:** module_variable
**Name:** Book
**File:** main.bal
**Lines:** 39-46 (8 lines)
**Position:** Start(39:1) - End(46:7)

**Content:**
```ballerina
Book validatedBook = {
        id: bookId,
        title: bookRequest.title.trim(),
        author: bookRequest.author.trim(),
        isbn: bookRequest.isbn.trim(),
        price: bookRequest.price,
        quantity: bookRequest.quantity
    };
```

================================================================================

## CHUNK 5
----------------------------------------
**Relevance Score:** 0.570884
**Type:** function
**Name:** validateAndFormatBook
**File:** main.bal
**Line:** 20
**Position:** Start(20:1) - End(20:77)
**Parameters:** BookRequest bookRequest
**Return Type:** Book|error
**Visibility:** private

**Content:**
```ballerina
function validateAndFormatBook(BookRequest bookRequest) returns Book|error {
    if bookRequest.title.trim().length() == 0 {
        return error("Book title cannot be empty");
    }

    if bookRequest.author.trim().length() == 0 {
        return error("Book author cannot be empty");
    }

    if bookRequest.price < 0.0d {
        return error("Book price cannot be negative");
    }

    if bookRequest.quantity < 0 {
        return error("Book quantity cannot be negative");
    }

    string bookId = uuid:createType1AsString();

    Book validatedBook = {
        id: bookId,
        title: bookRequest.title.trim(),
        author: bookRequest.author.trim(),
        isbn: bookRequest.isbn.trim(),
        price: bookRequest.price,
        quantity: bookRequest.quantity
    };

    return validatedBook;
}
```

================================================================================
# END OF RESULTS
Total chunks processed: 5
File saved: 2025-09-16T08:06:42.678Z
